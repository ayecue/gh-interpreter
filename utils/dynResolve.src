dynResolveModule = function()
	dynResolve = {}
	dynResolve.nativeHasIndex = @({})["hasIndex"]

	dynResolve.MODES = {"STRICT": 0,"WARN": 1,"IGNORE": 2}

	dynResolve.mode = dynResolve.MODES.IGNORE

	dynResolve.getMapIsa = function(v)
		handle = {}
		proxy = {}
		
		proxy.__ref = v
		proxy.classID = "dynProxy"
		proxy.hasIndex = @handle["hasIndex"]
		proxy.indexOf = @handle["indexOf"]
		proxy.push = @handle["push"]
		proxy.remove = @handle["remove"]
		proxy.indexes = @handle["indexes"]
		proxy.len = @handle["len"]
		proxy.pop = @handle["pop"]
		proxy.shuffle = @handle["shuffle"]
		proxy.sum = @handle["sum"]
		proxy.values = @handle["values"]
		
		return proxy
	end function

	dynResolve.getListIsa = function(v)
		handle = []
		proxy = {}
		
		proxy.__ref = v
		proxy.classID = "dynProxy"
		proxy.hasIndex = @handle["hasIndex"]
		proxy.indexOf = @handle["indexOf"]
		proxy.remove = @handle["remove"]
		proxy.join = @handle["join"]
		proxy.push = @handle["push"]
		proxy.pop = @handle["pop"]
		proxy.pull = @handle["pull"]
		proxy.shuffle = @handle["shuffle"]
		proxy.reverse = @handle["reverse"]
		proxy.sort = @handle["sort"]
		proxy.indexes = @handle["indexes"]
		proxy.len = @handle["len"]
		proxy.sum = @handle["sum"]
		proxy.values = @handle["values"]
		
		return proxy
	end function

	dynResolve.getStringIsa = function(v)
		handle = ""
		proxy = {}
		
		proxy.__ref = v
		proxy.classID = "dynProxy"
		proxy.remove = @handle["remove"]
		proxy.hasIndex = @handle["hasIndex"]
		proxy.indexOf = @handle["indexOf"]
		proxy.lastIndexOf = @handle["lastIndexOf"]
		proxy.split = @handle["split"]
		proxy.replace = @handle["replace"]
		proxy.trim = @handle["trim"]
		proxy.indexes = @handle["indexes"]
		proxy.code = @handle["code"]
		proxy.len = @handle["len"]
		proxy.lower = @handle["lower"]
		proxy.upper = @handle["upper"]
		proxy.val = @handle["val"]
		proxy.values = @handle["values"]
		proxy.to_int = @handle["to_int"]
		
		return proxy
	end function

	dynResolve.API_KEYS = ["aptclientLib", "computer", "cryptoLib", "file", "libMail", "MetaxploitLib", "MetaLib", "MetaMail", "NetSession", "port", "router", "shell", "ftpshell"]
	dynResolve.getApiIsa = function(v)
		handle = ""
		proxy = {}
		
		proxy.__ref = v
		proxy.classID = "dynProxy"
		
		for item in v.__isa
			proxy[item.key] = @item.value
		end for
		
		return proxy
	end function

	dynResolve.detach = function(v)
		me = self
		hasIndex = @me.hasIndex
		
		if (me.usesNativeIsa(@v)) then
			type = typeof(v)
			
			if (type == "map") then
				return me.getMapIsa(v)
			else if (type == "list") then
				return me.getListIsa(v)
			else if (type == "string") then
				return me.getStringIsa(v)
			else if (me.API_KEYS.indexOf(type) != null) then
				return me.getApiIsa(v)
			end if
		end if
		
		return @v
	end function

	dynResolve.usesNativeIsa = function(v)
		me = self
		type = typeof(@v)
		return type == "map" or type == "list" or type == "string" or me.API_KEYS.indexOf(type) != null
	end function

	dynResolve.get = function(v, path, defaultValue)
		if typeof(path) == "string" then
			path = path.split(".")
		end if

		me = self
		origin = @v
		hasIndex = @me.nativeHasIndex
		traversed = [] + path

		while @v != null
			if (traversed.len == 0) then break

			valType = typeof(@v)
			currentPath = traversed.pull()

			if ((valType == "list" or valType == "string") and typeof(currentPath) == "string") then
				currentPath = currentPath.to_int

				if (typeof(currentPath) == "string") then
					v = me.detach(v)
				end if
			end if
			if (hasIndex(@v, currentPath)) then
				v = @v[currentPath]
			else if (typeof(@v) != "string" and hasIndex(@v, "__isa") and hasIndex(v.__isa, currentPath)) then
				v = @v.__isa[currentPath]
			else if (me.usesNativeIsa(@v)) then
				detached = me.detach(v)
				
				if (detached.hasIndex(currentPath)) then
					v = @v[currentPath]
				else
					v = null
				end if
			else
				v = null
			end if
		end while

		if (typeof(@v) == "null") then
			if (typeof(@defaultValue) == "null") then
				me.raise("[WARNING] Cannot get value " + path.join(" ") + " from " + @origin)
			end if
			return @defaultValue
		end if

		return @v
	end function

	dynResolve.set = function(v, path, r)
		if typeof(path) == "string" then
			path = path.split(".")
		end if

		me = self
		origin = @v
		hasIndex = @me.hasIndex 
		traversed = [] + path
		last = traversed.pop()

		if (last == null) then
			return false
		end if

		v = me.get(v, traversed)
		valType = typeof(@v)

		if (typeof(v) == "null" or valType == "string" or valType == "boolean" or valType == "number" or valType == "function") then
			me.raise("[WARNING] Cannot set value " + path.join(" ")  + " on " + @origin)
			return false
		end if

		v[last] = @r

		return true
	end function

	dynResolve.getCallable = function(v, path)
		if typeof(path) == "string" then
			path = path.split(".")
		end if
		
		me = self
		origin = @v
		context = null
		hasIndex = @me.hasIndex 
		traversed = [] + path
		
		while @v != null
			if (traversed.len == 0) then break
			valType = typeof(@v)
			currentPath = traversed.pull()
			if ((valType == "list" or valType == "string") and typeof(currentPath) == "string") then
				currentPath = currentPath.to_int
				if (typeof(currentPath) == "string") then
					context = v
					v = me.detach(v)
					valType = typeof(@v)
				end if
			end if
			if (me.API_KEYS.indexOf(valType) != null) then
				context = me.detach(v)
				v = @v[currentPath]
			else if (hasIndex(@v, currentPath)) then
				context = @v
				v = @v[currentPath]
			else if (valType != "string" and hasIndex(@v, "__isa") and hasIndex(v.__isa, currentPath)) then
				context = @v
				v = @v.__isa[currentPath]
			else if (me.usesNativeIsa(@v)) then
				context = v
				detached = me.detach(v)
				
				if (detached.hasIndex(currentPath)) then
					v = @v[currentPath]
				else
					v = null
				end if
			else
				v = null
			end if
		end while
		if (typeof(@v) == "null") then
			me.raise("[WARNING] Cannot get callable value " + path.join(" ") + " from " + @origin)
		end if
		return {"origin": @v,"context": context}
	end function

	dynResolve.raise = function(msg)
		me = self
		if (me.mode == me.MODES.WARN) then
			print(msg)
		else if (me.mode == me.MODES.STRICT) then
			exit(msg)
		end if
	end function

	return dynResolve
end function

injector.def("dynResolve", @dynResolveModule)