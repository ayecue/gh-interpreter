import_code("/root/utils/injector.src":"./utils/injector.src")
import_code("/root/utils/argv.src":"./utils/argv.src")
import_code("/root/utils/eventEmitter.src":"./utils/eventEmitter.src")
import_code("/root/utils/lexer.src":"./utils/lexer.src")
import_code("/root/utils/parser.src":"./utils/parser.src")
import_code("/root/utils/interpreter.src":"./utils/interpreter.src")
import_code("/root/utils/dynApply.src":"./utils/dynApply.src")
import_code("/root/utils/dynResolve.src":"./utils/dynResolve.src")

Interpreter = injector.get("interpreter")

parseArgs = function()
	Argv = injector.get("argv")
	
	argDefinitions = []
	
	argDefinitions.push((new Argv.Arg).constructor("h", "help", Argv.ArgType.FLAG, "Print help"))
	
	helpBlock = []
	
	helpBlock.push("Interpreter Test CLI")
	helpBlock.push("Example: <b>interpreter file</b>")
	helpBlock.push("")
	
	for argDefinition in argDefinitions
		helpBlock.push(argDefinition.toString())
	end for
	
	help = helpBlock.join(char(10))
	
	argv = (new Argv).constructor(argDefinitions, help)
	
	argv.parse()
	
	return argv
end function

customPrint = function(a)
	print("<color=red>" + @a + "</color>")
	return null
end function

argv = parseArgs()

if (argv.getWithKey("help") == true) then
	exit(help)
end if

api = {}
api.print = @customPrint
api.wait = @wait
api.time = @time
api.typeof = @typeof
api.md5 = @md5
api.get_router = @get_router
api.get_shell = @get_shell
api.nslookup = @nslookup
api.whois = @whois
api.is_valid_ip = @is_valid_ip
api.is_lan_ip = @is_lan_ip
api.command_info = @command_info
api.current_date = @current_date
api.current_path = @current_path
api.parent_path = @parent_path
api.home_dir = @home_dir
api.program_path = @program_path
api.active_user = @active_user
api.user_mail_address = @user_mail_address
api.user_bank_number = @user_bank_number
api.format_columns = @format_columns
api.user_input = @user_input
api.include_lib = @include_lib
api.bitwise = @bitwise
api.clear_screen = @clear_screen
api.slice = @slice
api.str = @str
api.hash = @hash
api.abs = @abs
api.acos = @acos
api.asin = @asin
api.atan = @atan
api.tan = @tan
api.cos = @cos
api.sin = @sin
api.char = @char
api.floor = @floor
api.range = @range
api.round = @round
api.rnd = @rnd
api.sign = @sign
api.sqrt = @sqrt
api.str = @str
api.ceil = @ceil
api.pi = @pi
api.include_lib = @include_lib

testFile = get_shell.host_computer.File(argv.get(0, true))
code = testFile.get_content

startTime = time

print("Executing " + char(10) + code)

interpreter = (new Interpreter).constructor(code, api, params)

globalContext = interpreter.digest()

if (interpreter.hasError()) then
	print(interpreter.getErrors().join(char(10)))
end if

print("Executed in " + (time - startTime))
print("Global Context: ")
print(globalContext.scope.refs)