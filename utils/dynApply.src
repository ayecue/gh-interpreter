dynApplyModule = function()
	dynApply = {}
	methods = {}

	methods[0] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref)
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec()
	end function

	methods[1] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0])
	end function

	methods[2] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0], @c.args[1])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0], @c.args[1])
	end function

	methods[3] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0], @c.args[1], @c.args[2])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0], @c.args[1], @c.args[2])
	end function

	methods[4] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0], @c.args[1], @c.args[2], @c.args[3])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0], @c.args[1], @c.args[2], @c.args[3])
	end function

	methods[5] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4])
	end function

	methods[6] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5])
	end function

	methods[7] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5], @c.args[6])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5], @c.args[6])
	end function

	methods[8] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5], @c.args[6], @c.args[7])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5], @c.args[6], @c.args[7])
	end function

	methods[9] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5], @c.args[6], @c.args[7], @c.args[8])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5], @c.args[6], @c.args[7], @c.args[8])
	end function

	methods[10] = function(c)
		if (typeof(c.ctx) == "dynProxy") then
			fn = @c.fn
			return fn(c.ctx.__ref, @c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5], @c.args[6], @c.args[7], @c.args[8], @c.args[9])
		end if
		c.ctx.__dynApplyExec = @c.fn
		return c.ctx.__dynApplyExec(@c.args[0], @c.args[1], @c.args[2], @c.args[3], @c.args[4], @c.args[5], @c.args[6], @c.args[7], @c.args[8], @c.args[9])
	end function

	dynApply.METHODS = methods

	dynApply.apply = function(fn, args, context)
		me = self
		if (args == null) then
			args = []
		end if
		if (context == null) then
			context = globals
		end if
		x = args.len
		if (me.METHODS.hasIndex(x)) then
			m = @me.METHODS[x]
			return m({"classID": "apply","ctx": context,"fn": @fn,"args": args})
		end if
		
		exit("Error: dynApply only supports 10 arguments")
	end function

	return dynApply
end function

injector.def("dynApply", @dynApplyModule)